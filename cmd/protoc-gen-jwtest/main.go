package main

import (
	"flag"
	"fmt"
	"go/format"
	"google.golang.org/protobuf/compiler/protogen"
	"regexp"
)

func fileGen(p *protogen.Plugin,file *protogen.File) error{
	fileName := *file.Proto.Name
	//fmt.Println(fileName)  标准输出额内容会被protoc拿到，为避免错误不要做打印操作

	//messageName := *file.Proto.MessageType[0].Name
	//fmt.Println(messageName)

	mainContent := fmt.Sprintf(`
    // Code generated by protoc-gen-jwtest. DO NOT EDIT.
    package jwtest
    import (
		"fmt"
	)
	func Print() {
		fmt.Println("hello")
	}
	`)

	formatContent, err := format.Source([]byte(mainContent))
	if err != nil {
		return err
	}

	f := getMainGeneratedFile(p,fileName,file)

	if _, err := f.Write(formatContent); err != nil {
		return err
	}

	return nil
}

func getMainGeneratedFile(p *protogen.Plugin, fileName string, file *protogen.File) *protogen.GeneratedFile{
	path := regexp.MustCompile(`^proto/(.*).proto`).ReplaceAllString(fileName, `jwtest/$1.jwtest.go`)

	generatedFile := p.NewGeneratedFile(
		path,
		protogen.GoImportPath(file.GeneratedFilenamePrefix),
	)
	return generatedFile
}

func main() {
	var flags flag.FlagSet
	// 插件参数
	opts := &protogen.Options{
		ParamFunc: flags.Set,
	}
	opts.Run(func(plugin *protogen.Plugin) error {
		for _,fileName := range plugin.Request.FileToGenerate{
			fileToGenerate := plugin.FilesByPath[fileName]

			if err := fileGen(plugin,fileToGenerate); err != nil {
				return err
			}
		}
		return nil
	})
}
